
# Mybatis

	- DB와 연결하는데 필요한 모든 jdbc 코드를 자동으로 생성해주는 프레임워크
	- XML 파일만 작성해두면 필요한 코드는 모두 자동으로 생성한다
	
# Mybatis 설정하기

	- application.properties
		
		+ datasource 설정 (기본적으로 hikariCP를 사용함)
		
		spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
		spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:xe
		spring.datasource.username=hr
		spring.datasource.password=1234
	
		+ hikari에 관련된 설정
		
		# datasource가 사용하는 hikariCP에 대한 세부 설정이 가능
		spring.datasource.hikari.maximum-pool-size=10
		spring.datasource.hikari.minimum-idle=5
		spring.datasource.hikari.idle-timeout=9000000
		... 등등
		
		
		#spring.datasource.hikari.driver-class-name=oracle.jdbc.driver.OracleDriver
		#spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@127.0.0.1:1521:xe
		#spring.datasource.hikari.username=hr
		#spring.datasource.hikari.password=1234
		
		+ mybatis 설정 파일 위치 정의 
		
		mybatis.config-location=classpath:mybatis-config.xml
		mybatis.mapper-locations=classpath:mapper/**/*.xml
		
	- classpath(src/main/resources/):mybatis-config.xml
		
		* 설정 예시
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE configuration
  			PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  			"https://mybatis.org/dtd/mybatis-3-config.dtd">
		<!-- mybatis > getting start > Building SqlSessionFactory from XML -->
		<!-- window > Preferences > Maven > download artiface javadoc 체크 -->
		<configuration>
			<typeAliases>
				<typeAlias type="com.ezen.springdata.dto.EmployeeDTO" alias="emp"/>
		<	/typeAliases>
		</configuration>
	
	- src/main/resources/mapper/**/*.xml
	
	* 설정예시
	
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
  		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
		<!-- mybatis > getting start > Exploring Mapped SQL Statements -->
		<!-- mapper의 namespace는 이 mapper를 가져다 쓸 때의 이름이다 -->
		<mapper namespace="Employees">
		<!-- 
		select의 id: 이 쿼리문을 실행하고 싶을 때 사용할 이름 
		resultType: 이 select 쿼리문의 실행 결과가 어떤 타입으로 나오게 될지 설정
		-->
		<select id="getAll" resultType="emp">
			SELECT 
				employee_id, first_name, last_name, email, phone_number, hire_date,
				job_id, salary, commission_pct, manager_id, department_id
			FROM
				employees2 
		</select>
	
			<!-- parameterType: 이 쿼리문을 실행하기 위해 전달받을 파라미터의 타입을 정의 -->
		<select id="get" resultType="emp" parameterType="Integer">
			SELECT 
				employee_id, first_name, last_name, email, phone_number, hire_date,
				job_id, salary, commission_pct, manager_id, department_id
			FROM
				employees2
			WHERE 
				employee_id = #{employee_id} <!-- 파라미터 사용 -->
			</select>
		</mapper>
	
# Mybatis Mapper 사용하기
	
	- mybatis는 매퍼에 등록된 쿼리문과 추가 정보들을 통해
	  개발자에게 필요한 jdbc 코드를 자동으로 생성해준다
	
	- <select> : 매퍼에 select 쿼리문을 등록해놓을 수 있다
			   단일 행만 조회되는 쿼리문은 selectOne() 메서드를 사용해 호출해야 하고
			   다중 행이 조회되는 쿼리문은 selectList() 메서드를 사용해 호출해야 한다
			   
		+ resultType : select의 결과가 dto인 경우 해당 dto의 패키지 경로를 적어놓는다.
				   	   마이바티스가 꺼낸 모든 내용은 dto에 자동으로 담겨있다.
				   	   
		+ parameterType : select의 조건등에 사용될 변수들이 어떤 타입의 데이터인지 적어놓는다.
			   
	
	- <insert> : 매퍼에 insert 쿼리문을 등록해 놓을 때 사용한다.
		 + <selectKey> : 방금 insert한 쿼리문이 DB로부터 부여받은 키 값을 받아오기 위해 사용한다 
		 
	- <update> : 매퍼에 update 쿼리문을 등록해 놓을 때 사용한다
	
	- <delete> : 매퍼에 delete 쿼리문을 등록해 놓을 때 사용한다
	
# 동적 쿼리문 작성하기

	- Mybatis에서 if문, for문 등을 이용해 동적으로 쿼리문을 작성 할 수 있다
	- https://mybatis.org/mybatis-3/ko/dynamic-sql.html
	